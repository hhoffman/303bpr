---
# roles/update_system/tasks/main.yml

- name: Gather facts
  ansible.builtin.setup:

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

#
# Check for updgradeable packages by Distro type
- name: Check for upgradable packages (Debian/Ubuntu)
  import_tasks: ubuntu.yml
  when: "ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu'"

- name: Check for upgradable packages (Rocky)
  import_tasks: redhat.yml
  when: ansible_os_family == 'RedHat'



# Check for an previous snapshot made by this play
- name: Check for previous snapshot made by this play
  command: "virsh snapshot-list --domain {{ inventory_hostname }}"
  register: snapshot_list
  delegate_to: localhost
  vars:
    ansible_become: false
    ansible_user: root
  when:
    - packages_need_updating | default(false) | bool
    - (ansible_virtualization_type == "kvm" or ansible_virtualization_type == "qemu")
    - ansible_virtualization_role == "guest"
      #ignore_errors: yes

- name: Remove existing snapshot before update if exists
  command: "virsh snapshot-delete --domain {{ inventory_hostname }} --snapshotname snapshot_before_update"
  delegate_to: localhost
  when:
    - snapshot_list is defined
    - "'snapshot_before_update' in snapshot_list.stdout"
  vars:
    ansible_become: false
    ansible_user: root
  ignore_errors: yes


# Create new snapshot before updating
- name: Create a snapshot if the server is KVM/QEMU and needs updating
  command: "virsh snapshot-create-as --domain {{ inventory_hostname }} --name snapshot_before_update"
  delegate_to: localhost
  vars:
    ansible_become: false
    ansible_user: root
  when:
    - (ansible_virtualization_type == "kvm" or ansible_virtualization_type == "qemu")
    - ansible_virtualization_role == "guest"
    - packages_need_updating | default(false) | bool


- name: Update system packages
  ansible.builtin.package:
    name: '*'
    state: latest
  when: 
    - "ansible_os_family == 'Debian' or ansible_os_family == 'Ubuntu' or ansible_os_family == 'Rocky'"
    - packages_need_updating | default(false) | bool

# Need to check if this is ubiqutious across OSs
- name: Check if reboot required
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Reboot if required
  reboot:
    msg: "Reboot initiated by Ansible for system updates"
  when: reboot_required_file.stat.exists and ansible_virtualization_role != "host"

- name: Message that reboot is required
  ansible.builtin.debug:
     msg: "Reboot required for {{ inventory_hostname }} after ansible package updates"
  when: reboot_required_file.stat.exists and ansible_virtualization_role == "host"
